Dockerfile  - This specifies the docker image
    
    FROM node:15                This is the base image
    WORKDIR /app                This specifies the working directory in our container
    COPY package.json .         Copy the package.json from local directory to container working directory (we do this first before copying to optimize caching of the image)
    RUN npm install             Run npm install 
    COPY . ./                   Copy the rest of the source files
    EXPOSE 3000`                Exposes a port to the public (By default closed down)
    CMD ["npm", "run", "dev"]   Specifies the command that the container will run


.dockerignore file specifies the files/directories to ignore when creating the image


docker build -t example_image-name .
    - builds an image with a specifies name with the Dockerfile in the specifies directory

docker image ls
    - list all existing images
docker image rm image_name
    - remove an image

docker run -v %cd%:/app:ro -v /app/node_modules --env-file ./.env -p 3000:4000 -d --name my_container my_image  
    -v %cd%:/app:ro
        This creates a binded volume to sync between local directory on right to container directory on the left
    -v /app/node_modules 
        This creaters an anonymous volume to preserve this directory in the container
        (Volumes go by order of specificity)
    --env-file ./.env
        This specifies the location of environment variable file
    -p 3000:4000 
        Redirects traffic from localhost port to docker container port
    -d
        Detached mode so you can still use the command line
    --name
        Specifies a name for the container
    image
        Image to build the container off of


docker rm my_container -fv
    -fv forces deletion and v deletes any associated volumes

docker ps 
    Shows all running containers


docker volume ls
    A volume is a persitent storage for your containers
        - Binded volume: the volume is binded (synced) with local machine
        - Anonymous volume: an unamed volume (hard to keep track off)
        - Named volume: a volume for the container with a specified name 
            - Can be used by multiple services

docker volume prune (deletes all NON RUNNING volumes can be dangerous)


docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d 
    -f pass a compose file
    up specify we are composing
    -d detached mode4
    --scale containernumber=2

    docker-compose.prod.yml for prod
    docker-compose.dev.yml for dev

docker-compose down -v
    Stop the container
    -v deletes the associated volume


docker exec -it container_name bash
    Enter the containers filesystem

printenv



mongo
    mongo -u "root" -p "docker123"
    > db
    test
    > use mydb
    switched to db mydb
    > show dbs
    admin   0.000GB
    config  0.000GB
    local   0.000GB
    > db.books.insert({"name":"Mike"})
    WriteResult({ "nInserted" : 1 })
    > db.books.find()
    { "_id" : ObjectId("61d114c57cd74f8e9f30274f"), "name" : "Mike" }
    > show dbs
    admin   0.000GB
    config  0.000GB
    local   0.000GB
    mydb    0.000GB
    > exit

OR docker exec -it first_docker_app_database_1 mongo -u "root" -p "docker123"  

Must specify the ip of the mongo container and port 27017 when connecting


docker inspect container_name
    - Shows all information about a container

docker logs
    -f to follow live


Networks
    - Each container has its own network, ips, and dns
    - DNS uses services names

Middleware - a function that runs before your controller
